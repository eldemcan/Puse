package userinterface;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;

import javax.swing.JList;
import javax.swing.TransferHandler;


import javax.swing.*;

 

import java.awt.*;
import java.awt.datatransfer.*;

public class ListHandler extends TransferHandler {
	
    private int[] indices = null;
    private int addIndex = -1; //Location where items were added
    private int addCount = 0;  //Number of items added.
            
    public boolean canImport(TransferHandler.TransferSupport info) {
        // Check for String flavor
        if (!info.isDataFlavorSupported(DataFlavor.stringFlavor)) {
            return false;
        }
        return true;
   }

    protected Transferable createTransferable(JComponent c) {
        return new StringSelection(exportString(c));
    }
    
    public int getSourceActions(JComponent c) {
        return TransferHandler.COPY_OR_MOVE;
    }
    
    public boolean importData(TransferHandler.TransferSupport info) {
        if (!info.isDrop()) {
            return false;
        }

        JList list = (JList)info.getComponent();
        DefaultListModel listModel = (DefaultListModel)list.getModel();
        JList.DropLocation dl = (JList.DropLocation)info.getDropLocation();
        int index = dl.getIndex();
        boolean insert = dl.isInsert();

        // Get the string that is being dropped.
        Transferable t = info.getTransferable();
        String data;
        try {
            data = (String)t.getTransferData(DataFlavor.stringFlavor);
        } 
        catch (Exception e) { return false; }
                                
        // Perform the actual import.  
        if (insert) {
            listModel.add(index, data);
        } else {
            listModel.set(index, data);
        }
        return true;
    }

//    protected void exportDone(JComponent c, Transferable data, int action) {
//      //  cleanup(c, action == TransferHandler.MOVE);
//    }

    //Bundle up the selected items in the list
    //as a single string, for export.
    protected String exportString(JComponent c) {
        JList list = (JList)c;
        indices = list.getSelectedIndices();
        Object[] values = list.getSelectedValues();
        
        StringBuffer buff = new StringBuffer();

        for (int i = 0; i < values.length; i++) {
            Object val = values[i];
            
            DrawerItem temp =(DrawerItem) val;
            
            buff.append(val == null ? "" : temp.description.toString());
            if (i != values.length - 1) {
                buff.append("\n");
            }
        }
        
        return buff.toString();
    }

    //Take the incoming string and wherever there is a
    //newline, break it into a separate item in the list.
//    protected void importString(JComponent c, String str) {
//        JList target = (JList)c;
//        DefaultListModel listModel = (DefaultListModel)target.getModel();
//        int index = target.getSelectedIndex();
//
//        //Prevent the user from dropping data back on itself.
//        //For example, if the user is moving items #4,#5,#6 and #7 and
//        //attempts to insert the items after item #5, this would
//        //be problematic when removing the original items.
//        //So this is not allowed.
//        if (indices != null && index >= indices[0] - 1 &&
//              index <= indices[indices.length - 1]) {
//            indices = null;
//            return;
//        }
//
//        int max = listModel.getSize();
//        if (index < 0) {
//            index = max;
//        } else {
//            index++;
//            if (index > max) {
//                index = max;
//            }
//        }
//        addIndex = index;
//        String[] values = str.split("\n");
//        addCount = values.length;
//        for (int i = 0; i < values.length; i++) {
//            listModel.add(index++, values[i]);
//        }
//    }
}